{"version":3,"sources":["logo.svg","controls.jsx","main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Controls","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleTab","bind","assertThisInitialized","section","toggleDisplay","_this2","react_default","a","createElement","id","onClick","src","React","Component","Main","state","pageUnlocked","displayTab","askForPassword","expandSection","window","localStorage","getItem","setState","prompt","setItem","_this$state","react_responsive_default","minDeviceWidth","maxDeviceWidth","controls_Controls","App","main_Main","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fe36138.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport default class Controls extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.toggleTab = this.toggleTab.bind(this);\n    }\n\n    toggleTab(section) {\n      const { toggleDisplay } = this.props;\n      toggleDisplay(section);\n    }\n\n    render() {\n      return (\n        <div id=\"controls\">\n          <div onClick={() => this.toggleTab('schedule')}>\n            <img id=\"trips\" src=\"https://res.cloudinary.com/ac31624/image/upload/v1561969187/jon_bache/trips.png\" />\n          </div>\n          <div id='midsection'>\n            <span onClick={() => this.toggleTab('photos')}>\n              <img id=\"photos\" src=\"https://res.cloudinary.com/ac31624/image/upload/v1561969188/jon_bache/test.png\" />\n            </span>\n            <span id=\"equals\">\n              =\n            </span>\n            <span onClick={() => this.toggleTab('other')}>\n              <img id=\"photos\" src=\"https://res.cloudinary.com/ac31624/image/upload/v1561969188/jon_bache/test.png\" />\n            </span>\n          </div>\n          <span onClick={() => this.toggleTab('video')}>\n            <img id=\"photos\" src=\"https://res.cloudinary.com/ac31624/image/upload/v1561969188/jon_bache/test.png\" />\n          </span>\n        </div>\n      );\n    }\n  }","import React, { Component } from 'react';\nimport Controls from './controls';\nimport MediaQuery from 'react-responsive';\n\nexport default class Main extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        pageUnlocked: false,\n        displayTab: null\n      };\n\n      this.askForPassword = this.askForPassword.bind(this);\n      this.expandSection = this.expandSection.bind(this);\n    }\n\n    componentDidMount() {\n      if (window.localStorage.getItem('pageUnlocked') === 'yes') {\n        this.setState({\n          pageUnlocked: true\n        })\n      } else {\n        this.askForPassword();\n      }\n    }\n\n    askForPassword() {\n      const answer = prompt(\"What's the passcode?\", \"idk\");\n\n      if (answer === '123') {\n        this.setState({\n          pageUnlocked: true\n        })\n        window.localStorage.setItem('pageUnlocked', 'yes');\n      } else {\n        this.askForPassword();\n      }\n    }\n\n    expandSection(section) {\n      this.setState({\n        displayTab: section\n      })\n    }\n  \n    render() {\n      const { pageUnlocked, displayTab } = this.state;\n\n      return (\n        <div>\n          <div id=\"header\"><img id=\"header-image\" src=\"https://res.cloudinary.com/ac31624/image/upload/v1561971783/jon_bache/vegas_sign.png\" /></div>\n          <MediaQuery minDeviceWidth={1224}>\n            desktop mode\n          </MediaQuery>\n          <MediaQuery maxDeviceWidth={1224}>\n            {pageUnlocked && \n              <div id='mainpage'>\n                <Controls toggleDisplay={this.expandSection} />\n                <span>\n                  {displayTab && displayTab === 'schedule' && \n                    <span>\n                      controls\n                    </span>\n                  }\n                </span>\n              </div>\n            }\n          </MediaQuery>\n        </div>\n      );\n    }\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './main';\n\nfunction App() {\n  return (\n    <div >\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}